{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Gidy\\\\Healthcare_project\\\\client\\\\src\\\\context\\\\InventoryContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\n\n// Create the context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InventoryContext = /*#__PURE__*/createContext(null);\n\n// Sample data generator function\nconst generateSampleData = () => {\n  const categories = ['Analgesics', 'Antibiotics', 'Antivirals', 'Cardiovascular', 'Dermatological', 'Diabetes', 'Gastrointestinal', 'Respiratory'];\n  const manufacturers = ['Pfizer', 'Novartis', 'Roche', 'Merck', 'GSK', 'Johnson & Johnson', 'AstraZeneca', 'Sanofi'];\n  const medicines = ['Aspirin', 'Ibuprofen', 'Paracetamol', 'Amoxicillin', 'Azithromycin', 'Ciprofloxacin', 'Metformin', 'Omeprazole', 'Lisinopril', 'Metoprolol'];\n  return Array.from({\n    length: 80\n  }, (_, index) => {\n    const expiryDate = new Date();\n    expiryDate.setDate(expiryDate.getDate() + Math.floor(Math.random() * 365));\n    const currentStock = Math.floor(Math.random() * 1000) + 100;\n    const reorderPoint = Math.floor(Math.random() * 200) + 50;\n    return {\n      id: index + 1,\n      name: `${medicines[Math.floor(Math.random() * medicines.length)]} ${Math.floor(Math.random() * 500)}mg`,\n      category: categories[Math.floor(Math.random() * categories.length)],\n      currentStock,\n      unit: Math.random() > 0.5 ? 'tablets' : 'bottles',\n      manufacturer: manufacturers[Math.floor(Math.random() * manufacturers.length)],\n      expiryDate: expiryDate.toISOString().split('T')[0],\n      location: `Storage ${String.fromCharCode(65 + Math.floor(Math.random() * 6))}-${Math.floor(Math.random() * 20) + 1}`,\n      serialNumber: `SN${Math.random().toString(36).substr(2, 9).toUpperCase()}`,\n      reorderPoint,\n      status: currentStock < reorderPoint ? 'Low Stock' : 'In Stock',\n      daysUntilExpiry: Math.ceil((expiryDate - new Date()) / (1000 * 60 * 60 * 24))\n    };\n  });\n};\n\n// Create the provider component\nexport const InventoryProvider = ({\n  children\n}) => {\n  _s();\n  const [inventory, setInventory] = useState(generateSampleData());\n  const [orders, setOrders] = useState([]);\n  const addItem = newItem => {\n    // Add to inventory\n    const itemToAdd = {\n      ...newItem,\n      id: Date.now(),\n      status: 'In Stock',\n      daysUntilExpiry: Math.ceil((new Date(newItem.expiryDate) - new Date()) / (1000 * 60 * 60 * 24))\n    };\n    setInventory(prev => [...prev, itemToAdd]);\n\n    // Create corresponding order\n    const order = {\n      id: Date.now(),\n      medicineId: itemToAdd.id,\n      medicineName: itemToAdd.name,\n      quantity: itemToAdd.currentStock,\n      orderDate: new Date().toISOString().split('T')[0],\n      status: 'Received',\n      supplier: itemToAdd.manufacturer\n    };\n    setOrders(prev => [...prev, order]);\n  };\n  const value = {\n    inventory,\n    orders,\n    addItem,\n    setInventory,\n    setOrders\n  };\n  return /*#__PURE__*/_jsxDEV(InventoryContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n\n// Create the custom hook\n_s(InventoryProvider, \"qVZCeJvIVns5OuVj8QG38OLrMfs=\");\n_c = InventoryProvider;\nexport const useInventory = () => {\n  _s2();\n  const context = useContext(InventoryContext);\n  if (context === null) {\n    throw new Error('useInventory must be used within an InventoryProvider');\n  }\n  return context;\n};\n_s2(useInventory, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const useInventoryContext = () => {\n  _s3();\n  return useContext(InventoryContext);\n};\n_s3(useInventoryContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"InventoryProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","InventoryContext","generateSampleData","categories","manufacturers","medicines","Array","from","length","_","index","expiryDate","Date","setDate","getDate","Math","floor","random","currentStock","reorderPoint","id","name","category","unit","manufacturer","toISOString","split","location","String","fromCharCode","serialNumber","toString","substr","toUpperCase","status","daysUntilExpiry","ceil","InventoryProvider","children","_s","inventory","setInventory","orders","setOrders","addItem","newItem","itemToAdd","now","prev","order","medicineId","medicineName","quantity","orderDate","supplier","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useInventory","_s2","context","Error","useInventoryContext","_s3","$RefreshReg$"],"sources":["C:/Users/HP/Gidy/Healthcare_project/client/src/context/InventoryContext.js"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\r\n\r\n// Create the context\r\nconst InventoryContext = createContext(null);\r\n\r\n// Sample data generator function\r\nconst generateSampleData = () => {\r\n  const categories = [\r\n    'Analgesics', 'Antibiotics', 'Antivirals', 'Cardiovascular',\r\n    'Dermatological', 'Diabetes', 'Gastrointestinal', 'Respiratory'\r\n  ];\r\n\r\n  const manufacturers = [\r\n    'Pfizer', 'Novartis', 'Roche', 'Merck', 'GSK', 'Johnson & Johnson',\r\n    'AstraZeneca', 'Sanofi'\r\n  ];\r\n\r\n  const medicines = [\r\n    'Aspirin', 'Ibuprofen', 'Paracetamol', 'Amoxicillin', 'Azithromycin',\r\n    'Ciprofloxacin', 'Metformin', 'Omeprazole', 'Lisinopril', 'Metoprolol'\r\n  ];\r\n\r\n  return Array.from({ length: 80 }, (_, index) => {\r\n    const expiryDate = new Date();\r\n    expiryDate.setDate(expiryDate.getDate() + Math.floor(Math.random() * 365));\r\n    \r\n    const currentStock = Math.floor(Math.random() * 1000) + 100;\r\n    const reorderPoint = Math.floor(Math.random() * 200) + 50;\r\n\r\n    return {\r\n      id: index + 1,\r\n      name: `${medicines[Math.floor(Math.random() * medicines.length)]} ${Math.floor(Math.random() * 500)}mg`,\r\n      category: categories[Math.floor(Math.random() * categories.length)],\r\n      currentStock,\r\n      unit: Math.random() > 0.5 ? 'tablets' : 'bottles',\r\n      manufacturer: manufacturers[Math.floor(Math.random() * manufacturers.length)],\r\n      expiryDate: expiryDate.toISOString().split('T')[0],\r\n      location: `Storage ${String.fromCharCode(65 + Math.floor(Math.random() * 6))}-${Math.floor(Math.random() * 20) + 1}`,\r\n      serialNumber: `SN${Math.random().toString(36).substr(2, 9).toUpperCase()}`,\r\n      reorderPoint,\r\n      status: currentStock < reorderPoint ? 'Low Stock' : 'In Stock',\r\n      daysUntilExpiry: Math.ceil((expiryDate - new Date()) / (1000 * 60 * 60 * 24))\r\n    };\r\n  });\r\n};\r\n\r\n// Create the provider component\r\nexport const InventoryProvider = ({ children }) => {\r\n  const [inventory, setInventory] = useState(generateSampleData());\r\n  const [orders, setOrders] = useState([]);\r\n\r\n  const addItem = (newItem) => {\r\n    // Add to inventory\r\n    const itemToAdd = {\r\n      ...newItem,\r\n      id: Date.now(),\r\n      status: 'In Stock',\r\n      daysUntilExpiry: Math.ceil((new Date(newItem.expiryDate) - new Date()) / (1000 * 60 * 60 * 24))\r\n    };\r\n\r\n    setInventory(prev => [...prev, itemToAdd]);\r\n\r\n    // Create corresponding order\r\n    const order = {\r\n      id: Date.now(),\r\n      medicineId: itemToAdd.id,\r\n      medicineName: itemToAdd.name,\r\n      quantity: itemToAdd.currentStock,\r\n      orderDate: new Date().toISOString().split('T')[0],\r\n      status: 'Received',\r\n      supplier: itemToAdd.manufacturer\r\n    };\r\n\r\n    setOrders(prev => [...prev, order]);\r\n  };\r\n\r\n  const value = {\r\n    inventory,\r\n    orders,\r\n    addItem,\r\n    setInventory,\r\n    setOrders\r\n  };\r\n\r\n  return (\r\n    <InventoryContext.Provider value={value}>\r\n      {children}\r\n    </InventoryContext.Provider>\r\n  );\r\n};\r\n\r\n// Create the custom hook\r\nexport const useInventory = () => {\r\n  const context = useContext(InventoryContext);\r\n  if (context === null) {\r\n    throw new Error('useInventory must be used within an InventoryProvider');\r\n  }\r\n  return context;\r\n}; \r\nexport const useInventoryContext = () => useContext(InventoryContext); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}