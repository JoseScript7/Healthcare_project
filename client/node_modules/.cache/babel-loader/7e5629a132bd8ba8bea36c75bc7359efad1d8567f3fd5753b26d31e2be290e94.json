{"ast":null,"code":"export const generateSampleData = () => {\n  const categories = ['Analgesics', 'Antibiotics', 'Antivirals', 'Cardiovascular', 'Dermatological', 'Diabetes', 'Gastrointestinal', 'Hormones', 'Immunological', 'Neurological', 'Ophthalmological', 'Psychiatric', 'Respiratory', 'Vaccines'];\n  const manufacturers = ['Pfizer', 'Novartis', 'Roche', 'Merck', 'GSK', 'Johnson & Johnson', 'AstraZeneca', 'Sanofi', 'Abbott', 'Bayer', 'Eli Lilly', 'Bristol Myers Squibb'];\n  const locations = Array.from({\n    length: 10\n  }, (_, i) => `Storage ${String.fromCharCode(65 + i)}-${String(Math.floor(Math.random() * 20) + 1).padStart(2, '0')}`);\n  const medicines = ['Aspirin', 'Ibuprofen', 'Paracetamol', 'Amoxicillin', 'Azithromycin', 'Ciprofloxacin', 'Metformin', 'Omeprazole', 'Lisinopril', 'Metoprolol', 'Amlodipine', 'Simvastatin', 'Sertraline', 'Fluoxetine', 'Gabapentin', 'Tramadol', 'Hydrocodone', 'Prednisone', 'Levothyroxine', 'Albuterol'];\n  const generateExpiryDate = () => {\n    const date = new Date();\n    date.setDate(date.getDate() + Math.floor(Math.random() * 365));\n    return date.toISOString().split('T')[0];\n  };\n  return Array.from({\n    length: 80\n  }, (_, index) => {\n    const category = categories[Math.floor(Math.random() * categories.length)];\n    const currentStock = Math.floor(Math.random() * 1000) + 100;\n    const reorderPoint = Math.floor(Math.random() * 200) + 50;\n    const expiryDate = generateExpiryDate();\n    const daysUntilExpiry = Math.ceil((new Date(expiryDate) - new Date()) / (1000 * 60 * 60 * 24));\n    return {\n      id: index + 1,\n      name: `${medicines[Math.floor(Math.random() * medicines.length)]} ${Math.floor(Math.random() * 500)}mg`,\n      category,\n      currentStock,\n      unit: Math.random() > 0.5 ? 'tablets' : 'bottles',\n      manufacturer: manufacturers[Math.floor(Math.random() * manufacturers.length)],\n      expiryDate,\n      location: locations[Math.floor(Math.random() * locations.length)],\n      serialNumber: `SN${Math.random().toString(36).substr(2, 9).toUpperCase()}`,\n      reorderPoint,\n      daysUntilExpiry,\n      status: currentStock < reorderPoint ? 'Low Stock' : 'In Stock'\n    };\n  });\n};","map":{"version":3,"names":["generateSampleData","categories","manufacturers","locations","Array","from","length","_","i","String","fromCharCode","Math","floor","random","padStart","medicines","generateExpiryDate","date","Date","setDate","getDate","toISOString","split","index","category","currentStock","reorderPoint","expiryDate","daysUntilExpiry","ceil","id","name","unit","manufacturer","location","serialNumber","toString","substr","toUpperCase","status"],"sources":["C:/Users/HP/Gidy/Healthcare_project/client/src/utils/sampleData.js"],"sourcesContent":["export const generateSampleData = () => {\r\n  const categories = [\r\n    'Analgesics', 'Antibiotics', 'Antivirals', 'Cardiovascular',\r\n    'Dermatological', 'Diabetes', 'Gastrointestinal', 'Hormones',\r\n    'Immunological', 'Neurological', 'Ophthalmological', 'Psychiatric',\r\n    'Respiratory', 'Vaccines'\r\n  ];\r\n\r\n  const manufacturers = [\r\n    'Pfizer', 'Novartis', 'Roche', 'Merck', 'GSK', 'Johnson & Johnson',\r\n    'AstraZeneca', 'Sanofi', 'Abbott', 'Bayer', 'Eli Lilly', 'Bristol Myers Squibb'\r\n  ];\r\n\r\n  const locations = Array.from({ length: 10 }, (_, i) => \r\n    `Storage ${String.fromCharCode(65 + i)}-${String(Math.floor(Math.random() * 20) + 1).padStart(2, '0')}`\r\n  );\r\n\r\n  const medicines = [\r\n    'Aspirin', 'Ibuprofen', 'Paracetamol', 'Amoxicillin', 'Azithromycin',\r\n    'Ciprofloxacin', 'Metformin', 'Omeprazole', 'Lisinopril', 'Metoprolol',\r\n    'Amlodipine', 'Simvastatin', 'Sertraline', 'Fluoxetine', 'Gabapentin',\r\n    'Tramadol', 'Hydrocodone', 'Prednisone', 'Levothyroxine', 'Albuterol'\r\n  ];\r\n\r\n  const generateExpiryDate = () => {\r\n    const date = new Date();\r\n    date.setDate(date.getDate() + Math.floor(Math.random() * 365));\r\n    return date.toISOString().split('T')[0];\r\n  };\r\n\r\n  return Array.from({ length: 80 }, (_, index) => {\r\n    const category = categories[Math.floor(Math.random() * categories.length)];\r\n    const currentStock = Math.floor(Math.random() * 1000) + 100;\r\n    const reorderPoint = Math.floor(Math.random() * 200) + 50;\r\n    const expiryDate = generateExpiryDate();\r\n    const daysUntilExpiry = Math.ceil((new Date(expiryDate) - new Date()) / (1000 * 60 * 60 * 24));\r\n\r\n    return {\r\n      id: index + 1,\r\n      name: `${medicines[Math.floor(Math.random() * medicines.length)]} ${Math.floor(Math.random() * 500)}mg`,\r\n      category,\r\n      currentStock,\r\n      unit: Math.random() > 0.5 ? 'tablets' : 'bottles',\r\n      manufacturer: manufacturers[Math.floor(Math.random() * manufacturers.length)],\r\n      expiryDate,\r\n      location: locations[Math.floor(Math.random() * locations.length)],\r\n      serialNumber: `SN${Math.random().toString(36).substr(2, 9).toUpperCase()}`,\r\n      reorderPoint,\r\n      daysUntilExpiry,\r\n      status: currentStock < reorderPoint ? 'Low Stock' : 'In Stock'\r\n    };\r\n  });\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}