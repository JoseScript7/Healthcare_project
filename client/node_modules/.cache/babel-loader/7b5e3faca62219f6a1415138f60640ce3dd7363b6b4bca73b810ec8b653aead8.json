{"ast":null,"code":"import api from './api';\nexport const reportService = {\n  async generateInventoryReport(format = 'excel') {\n    try {\n      const response = await api.get(`/reports/inventory?format=${format}`, {\n        responseType: 'blob'\n      });\n      const blob = new Blob([response.data], {\n        type: format === 'excel' ? 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' : 'application/pdf'\n      });\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `inventory-report.${format === 'excel' ? 'xlsx' : 'pdf'}`;\n      link.click();\n      window.URL.revokeObjectURL(url);\n    } catch (error) {\n      console.error('Generate Report Error:', error);\n      throw new Error('Failed to generate report');\n    }\n  },\n  async generateTransactionReport(startDate, endDate) {\n    try {\n      const response = await api.get('/reports/transactions', {\n        params: {\n          startDate,\n          endDate\n        },\n        responseType: 'blob'\n      });\n      const blob = new Blob([response.data], {\n        type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n      });\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = 'transaction-report.xlsx';\n      link.click();\n      window.URL.revokeObjectURL(url);\n    } catch (error) {\n      console.error('Generate Transaction Report Error:', error);\n      throw new Error('Failed to generate transaction report');\n    }\n  },\n  async downloadInventoryReport(format = 'excel') {\n    try {\n      const response = await api.get(`/reports/inventory?format=${format}`, {\n        responseType: 'blob'\n      });\n      const blob = new Blob([response.data], {\n        type: format === 'excel' ? 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' : 'application/pdf'\n      });\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `inventory-report.${format}`;\n      link.click();\n      window.URL.revokeObjectURL(url);\n    } catch (error) {\n      console.error('Download Report Error:', error);\n      throw new Error('Failed to download report');\n    }\n  }\n};\nexport const downloadInventoryReport = reportService.downloadInventoryReport;","map":{"version":3,"names":["api","reportService","generateInventoryReport","format","response","get","responseType","blob","Blob","data","type","url","window","URL","createObjectURL","link","document","createElement","href","download","click","revokeObjectURL","error","console","Error","generateTransactionReport","startDate","endDate","params","downloadInventoryReport"],"sources":["F:/FullStack/2025 - Feb/ExpiryTracking_and_redistribution/client/src/services/report.service.js"],"sourcesContent":["import api from './api';\r\n\r\nexport const reportService = {\r\n  async generateInventoryReport(format = 'excel') {\r\n    try {\r\n      const response = await api.get(`/reports/inventory?format=${format}`, {\r\n        responseType: 'blob'\r\n      });\r\n      \r\n      const blob = new Blob([response.data], {\r\n        type: format === 'excel'\r\n          ? 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\r\n          : 'application/pdf'\r\n      });\r\n      \r\n      const url = window.URL.createObjectURL(blob);\r\n      const link = document.createElement('a');\r\n      link.href = url;\r\n      link.download = `inventory-report.${format === 'excel' ? 'xlsx' : 'pdf'}`;\r\n      link.click();\r\n      window.URL.revokeObjectURL(url);\r\n    } catch (error) {\r\n      console.error('Generate Report Error:', error);\r\n      throw new Error('Failed to generate report');\r\n    }\r\n  },\r\n\r\n  async generateTransactionReport(startDate, endDate) {\r\n    try {\r\n      const response = await api.get('/reports/transactions', {\r\n        params: { startDate, endDate },\r\n        responseType: 'blob'\r\n      });\r\n      \r\n      const blob = new Blob([response.data], {\r\n        type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\r\n      });\r\n      \r\n      const url = window.URL.createObjectURL(blob);\r\n      const link = document.createElement('a');\r\n      link.href = url;\r\n      link.download = 'transaction-report.xlsx';\r\n      link.click();\r\n      window.URL.revokeObjectURL(url);\r\n    } catch (error) {\r\n      console.error('Generate Transaction Report Error:', error);\r\n      throw new Error('Failed to generate transaction report');\r\n    }\r\n  },\r\n\r\n  async downloadInventoryReport(format = 'excel') {\r\n    try {\r\n      const response = await api.get(`/reports/inventory?format=${format}`, {\r\n        responseType: 'blob'\r\n      });\r\n      \r\n      const blob = new Blob([response.data], {\r\n        type: format === 'excel' \r\n          ? 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\r\n          : 'application/pdf'\r\n      });\r\n      \r\n      const url = window.URL.createObjectURL(blob);\r\n      const link = document.createElement('a');\r\n      link.href = url;\r\n      link.download = `inventory-report.${format}`;\r\n      link.click();\r\n      window.URL.revokeObjectURL(url);\r\n    } catch (error) {\r\n      console.error('Download Report Error:', error);\r\n      throw new Error('Failed to download report');\r\n    }\r\n  }\r\n};\r\n\r\nexport const downloadInventoryReport = reportService.downloadInventoryReport; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}