{"ast":null,"code":"var _jsxFileName = \"F:\\\\FullStack\\\\2025 - Feb\\\\ExpiryTracking_and_redistribution\\\\client\\\\src\\\\components\\\\Notification\\\\NotificationBell.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useNotifications } from '../../contexts/NotificationContext';\nimport NotificationList from './NotificationList';\nimport { FaBell } from 'react-icons/fa';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction NotificationBell() {\n  _s();\n  const [isOpen, setIsOpen] = useState(false);\n  const [error, setError] = useState(null);\n  const {\n    unreadCount,\n    error: contextError,\n    refresh\n  } = useNotifications();\n  useEffect(() => {\n    if (contextError) {\n      setError(contextError);\n      // Auto-retry on error after 5 seconds\n      const timer = setTimeout(refresh, 5000);\n      return () => clearTimeout(timer);\n    }\n  }, [contextError, refresh]);\n  const handleToggle = useCallback(() => {\n    setIsOpen(prev => !prev);\n    setError(null); // Clear any previous errors when toggling\n  }, []);\n  if (error) {\n    console.error('Notification error:', error);\n    return null; // Hide bell on error\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"notification-bell-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"notification-bell\",\n      onClick: handleToggle,\n      \"aria-label\": \"Notifications\",\n      \"aria-expanded\": isOpen,\n      \"aria-haspopup\": \"true\",\n      children: [/*#__PURE__*/_jsxDEV(FaBell, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), unreadCount > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"notification-badge\",\n        \"aria-label\": `${unreadCount} unread notifications`,\n        role: \"status\",\n        children: unreadCount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notification-dropdown\",\n      role: \"dialog\",\n      \"aria-label\": \"Notifications list\",\n      children: /*#__PURE__*/_jsxDEV(NotificationList, {\n        onClose: () => setIsOpen(false),\n        onError: setError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}\n_s(NotificationBell, \"X43y+gJx2SQfDgE2oCYcH5jhK1w=\", false, function () {\n  return [useNotifications];\n});\n_c = NotificationBell;\nexport default _c2 = /*#__PURE__*/React.memo(NotificationBell);\nvar _c, _c2;\n$RefreshReg$(_c, \"NotificationBell\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useNotifications","NotificationList","FaBell","jsxDEV","_jsxDEV","NotificationBell","_s","isOpen","setIsOpen","error","setError","unreadCount","contextError","refresh","timer","setTimeout","clearTimeout","handleToggle","prev","console","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","role","onClose","onError","_c","_c2","memo","$RefreshReg$"],"sources":["F:/FullStack/2025 - Feb/ExpiryTracking_and_redistribution/client/src/components/Notification/NotificationBell.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useNotifications } from '../../contexts/NotificationContext';\r\nimport NotificationList from './NotificationList';\r\nimport { FaBell } from 'react-icons/fa';\r\nimport './styles.css';\r\n\r\nfunction NotificationBell() {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const { unreadCount, error: contextError, refresh } = useNotifications();\r\n\r\n  useEffect(() => {\r\n    if (contextError) {\r\n      setError(contextError);\r\n      // Auto-retry on error after 5 seconds\r\n      const timer = setTimeout(refresh, 5000);\r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [contextError, refresh]);\r\n\r\n  const handleToggle = useCallback(() => {\r\n    setIsOpen(prev => !prev);\r\n    setError(null); // Clear any previous errors when toggling\r\n  }, []);\r\n\r\n  if (error) {\r\n    console.error('Notification error:', error);\r\n    return null; // Hide bell on error\r\n  }\r\n\r\n  return (\r\n    <div className=\"notification-bell-container\">\r\n      <button \r\n        className=\"notification-bell\"\r\n        onClick={handleToggle}\r\n        aria-label=\"Notifications\"\r\n        aria-expanded={isOpen}\r\n        aria-haspopup=\"true\"\r\n      >\r\n        <FaBell />\r\n        {unreadCount > 0 && (\r\n          <span \r\n            className=\"notification-badge\" \r\n            aria-label={`${unreadCount} unread notifications`}\r\n            role=\"status\"\r\n          >\r\n            {unreadCount}\r\n          </span>\r\n        )}\r\n      </button>\r\n\r\n      {isOpen && (\r\n        <div \r\n          className=\"notification-dropdown\"\r\n          role=\"dialog\"\r\n          aria-label=\"Notifications list\"\r\n        >\r\n          <NotificationList \r\n            onClose={() => setIsOpen(false)}\r\n            onError={setError}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default React.memo(NotificationBell); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}