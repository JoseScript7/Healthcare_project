{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Gidy\\\\Healthcare_project\\\\client\\\\src\\\\components\\\\Notification\\\\NotificationList.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useCallback } from 'react';\nimport { useNotifications } from '../../contexts/NotificationContext';\nimport { formatDistanceToNow } from 'date-fns';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction NotificationList({\n  onClose,\n  onError\n}) {\n  _s();\n  const {\n    notifications,\n    markAsRead,\n    loading\n  } = useNotifications();\n  const navigate = useNavigate();\n  const listRef = useRef();\n  useEffect(() => {\n    const handleClickOutside = event => {\n      if (listRef.current && !listRef.current.contains(event.target)) {\n        onClose();\n      }\n    };\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, [onClose]);\n  const handleNotificationClick = useCallback(async notification => {\n    try {\n      if (notification.status === 'unread') {\n        await markAsRead(notification.notification_id);\n      }\n\n      // Handle navigation based on notification type and reference\n      switch (notification.type) {\n        case 'low_stock':\n          navigate(`/inventory/${notification.reference_id}`);\n          break;\n        case 'expiry':\n          navigate(`/stock/${notification.reference_id}`);\n          break;\n        case 'transfer':\n          navigate(`/transfers/${notification.reference_id}`);\n          break;\n        default:\n          console.warn('Unknown notification type:', notification.type);\n          break;\n      }\n      onClose();\n    } catch (error) {\n      console.error('Error handling notification:', error);\n      onError(error);\n    }\n  }, [navigate, markAsRead, onClose, onError]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notification-loading\",\n      role: \"status\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"sr-only\",\n        children: \"Loading notifications...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), \"Loading...\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"notification-list\",\n    ref: listRef,\n    role: \"region\",\n    \"aria-label\": \"Notifications\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notification-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Notifications\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"close-button\",\n        onClick: onClose,\n        \"aria-label\": \"Close notifications\",\n        children: \"\\xD7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), notifications.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-notifications\",\n      children: \"No notifications\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notifications-container\",\n      children: notifications.map(notification => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `notification-item ${notification.status}`,\n        onClick: () => handleNotificationClick(notification),\n        role: \"button\",\n        tabIndex: 0,\n        onKeyPress: e => {\n          if (e.key === 'Enter' || e.key === ' ') {\n            handleNotificationClick(notification);\n          }\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"notification-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: notification.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: notification.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"notification-time\",\n            children: formatDistanceToNow(new Date(notification.created_at), {\n              addSuffix: true\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 15\n        }, this)\n      }, notification.notification_id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n_s(NotificationList, \"D4gHRize9GedlKirjXN2G9k3Npk=\", false, function () {\n  return [useNotifications, useNavigate];\n});\n_c = NotificationList;\nexport default _c2 = /*#__PURE__*/React.memo(NotificationList);\nvar _c, _c2;\n$RefreshReg$(_c, \"NotificationList\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","useRef","useEffect","useCallback","useNotifications","formatDistanceToNow","useNavigate","jsxDEV","_jsxDEV","NotificationList","onClose","onError","_s","notifications","markAsRead","loading","navigate","listRef","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","handleNotificationClick","notification","status","notification_id","type","reference_id","console","warn","error","className","role","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","onClick","length","map","tabIndex","onKeyPress","e","key","title","message","Date","created_at","addSuffix","_c","_c2","memo","$RefreshReg$"],"sources":["C:/Users/HP/Gidy/Healthcare_project/client/src/components/Notification/NotificationList.js"],"sourcesContent":["import React, { useRef, useEffect, useCallback } from 'react';\r\nimport { useNotifications } from '../../contexts/NotificationContext';\r\nimport { formatDistanceToNow } from 'date-fns';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nfunction NotificationList({ onClose, onError }) {\r\n  const { notifications, markAsRead, loading } = useNotifications();\r\n  const navigate = useNavigate();\r\n  const listRef = useRef();\r\n\r\n  useEffect(() => {\r\n    const handleClickOutside = (event) => {\r\n      if (listRef.current && !listRef.current.contains(event.target)) {\r\n        onClose();\r\n      }\r\n    };\r\n\r\n    document.addEventListener('mousedown', handleClickOutside);\r\n    return () => document.removeEventListener('mousedown', handleClickOutside);\r\n  }, [onClose]);\r\n\r\n  const handleNotificationClick = useCallback(async (notification) => {\r\n    try {\r\n      if (notification.status === 'unread') {\r\n        await markAsRead(notification.notification_id);\r\n      }\r\n\r\n      // Handle navigation based on notification type and reference\r\n      switch (notification.type) {\r\n        case 'low_stock':\r\n          navigate(`/inventory/${notification.reference_id}`);\r\n          break;\r\n        case 'expiry':\r\n          navigate(`/stock/${notification.reference_id}`);\r\n          break;\r\n        case 'transfer':\r\n          navigate(`/transfers/${notification.reference_id}`);\r\n          break;\r\n        default:\r\n          console.warn('Unknown notification type:', notification.type);\r\n          break;\r\n      }\r\n      onClose();\r\n    } catch (error) {\r\n      console.error('Error handling notification:', error);\r\n      onError(error);\r\n    }\r\n  }, [navigate, markAsRead, onClose, onError]);\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"notification-loading\" role=\"status\">\r\n        <span className=\"sr-only\">Loading notifications...</span>\r\n        Loading...\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div \r\n      className=\"notification-list\" \r\n      ref={listRef}\r\n      role=\"region\"\r\n      aria-label=\"Notifications\"\r\n    >\r\n      <div className=\"notification-header\">\r\n        <h3>Notifications</h3>\r\n        <button \r\n          className=\"close-button\" \r\n          onClick={onClose}\r\n          aria-label=\"Close notifications\"\r\n        >\r\n          &times;\r\n        </button>\r\n      </div>\r\n\r\n      {notifications.length === 0 ? (\r\n        <div className=\"no-notifications\">No notifications</div>\r\n      ) : (\r\n        <div className=\"notifications-container\">\r\n          {notifications.map(notification => (\r\n            <div\r\n              key={notification.notification_id}\r\n              className={`notification-item ${notification.status}`}\r\n              onClick={() => handleNotificationClick(notification)}\r\n              role=\"button\"\r\n              tabIndex={0}\r\n              onKeyPress={(e) => {\r\n                if (e.key === 'Enter' || e.key === ' ') {\r\n                  handleNotificationClick(notification);\r\n                }\r\n              }}\r\n            >\r\n              <div className=\"notification-content\">\r\n                <h4>{notification.title}</h4>\r\n                <p>{notification.message}</p>\r\n                <span className=\"notification-time\">\r\n                  {formatDistanceToNow(new Date(notification.created_at), { addSuffix: true })}\r\n                </span>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default React.memo(NotificationList); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}