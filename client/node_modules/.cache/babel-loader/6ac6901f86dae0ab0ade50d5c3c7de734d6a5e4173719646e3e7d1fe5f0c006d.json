{"ast":null,"code":"var _jsxFileName = \"F:\\\\FullStack\\\\2025 - Feb\\\\ExpiryTracking_and_redistribution\\\\client\\\\src\\\\contexts\\\\NotificationContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect, useCallback, useRef } from 'react';\nimport { getNotifications, markNotificationAsRead } from '../services/notification.service';\nimport { useAuth } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotificationContext = /*#__PURE__*/createContext();\nexport const useNotifications = () => {\n  _s();\n  const context = useContext(NotificationContext);\n  if (!context) {\n    throw new Error('useNotifications must be used within a NotificationProvider');\n  }\n  return context;\n};\n_s(useNotifications, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const NotificationProvider = ({\n  children\n}) => {\n  _s2();\n  const [notifications, setNotifications] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const {\n    user\n  } = useAuth();\n  const intervalRef = useRef(null);\n  const loadNotifications = useCallback(async () => {\n    if (!user) {\n      setNotifications([]);\n      setUnreadCount(0);\n      setLoading(false);\n      return;\n    }\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await getNotifications();\n      setNotifications(data);\n      setUnreadCount(data.filter(n => n.status === 'unread').length);\n    } catch (error) {\n      setError(error.message);\n      console.error('Failed to load notifications:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [user]);\n  const markAsRead = async notificationId => {\n    try {\n      setError(null);\n      await markNotificationAsRead(notificationId);\n      setNotifications(prev => prev.map(n => n.notification_id === notificationId ? {\n        ...n,\n        status: 'read'\n      } : n));\n      setUnreadCount(prev => Math.max(0, prev - 1));\n    } catch (error) {\n      setError(error.message);\n      console.error('Failed to mark notification as read:', error);\n      throw error;\n    }\n  };\n  useEffect(() => {\n    loadNotifications();\n    if (user) {\n      intervalRef.current = setInterval(loadNotifications, 60000);\n      return () => {\n        if (intervalRef.current) {\n          clearInterval(intervalRef.current);\n        }\n      };\n    }\n  }, [user, loadNotifications]);\n  const value = {\n    notifications,\n    unreadCount,\n    loading,\n    error,\n    markAsRead,\n    refresh: loadNotifications\n  };\n  return /*#__PURE__*/_jsxDEV(NotificationContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n_s2(NotificationProvider, \"IpGVl2fPiG3JTM2Ldn182H/7/hY=\", false, function () {\n  return [useAuth];\n});\n_c = NotificationProvider;\nvar _c;\n$RefreshReg$(_c, \"NotificationProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","useRef","getNotifications","markNotificationAsRead","useAuth","jsxDEV","_jsxDEV","NotificationContext","useNotifications","_s","context","Error","NotificationProvider","children","_s2","notifications","setNotifications","unreadCount","setUnreadCount","loading","setLoading","error","setError","user","intervalRef","loadNotifications","data","filter","n","status","length","message","console","markAsRead","notificationId","prev","map","notification_id","Math","max","current","setInterval","clearInterval","value","refresh","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["F:/FullStack/2025 - Feb/ExpiryTracking_and_redistribution/client/src/contexts/NotificationContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useCallback, useRef } from 'react';\r\nimport { getNotifications, markNotificationAsRead } from '../services/notification.service';\r\nimport { useAuth } from './AuthContext';\r\n\r\nconst NotificationContext = createContext();\r\n\r\nexport const useNotifications = () => {\r\n  const context = useContext(NotificationContext);\r\n  if (!context) {\r\n    throw new Error('useNotifications must be used within a NotificationProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const NotificationProvider = ({ children }) => {\r\n  const [notifications, setNotifications] = useState([]);\r\n  const [unreadCount, setUnreadCount] = useState(0);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const { user } = useAuth();\r\n  const intervalRef = useRef(null);\r\n\r\n  const loadNotifications = useCallback(async () => {\r\n    if (!user) {\r\n      setNotifications([]);\r\n      setUnreadCount(0);\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      const data = await getNotifications();\r\n      setNotifications(data);\r\n      setUnreadCount(data.filter(n => n.status === 'unread').length);\r\n    } catch (error) {\r\n      setError(error.message);\r\n      console.error('Failed to load notifications:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [user]);\r\n\r\n  const markAsRead = async (notificationId) => {\r\n    try {\r\n      setError(null);\r\n      await markNotificationAsRead(notificationId);\r\n      setNotifications(prev => prev.map(n => \r\n        n.notification_id === notificationId \r\n          ? { ...n, status: 'read' } \r\n          : n\r\n      ));\r\n      setUnreadCount(prev => Math.max(0, prev - 1));\r\n    } catch (error) {\r\n      setError(error.message);\r\n      console.error('Failed to mark notification as read:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadNotifications();\r\n\r\n    if (user) {\r\n      intervalRef.current = setInterval(loadNotifications, 60000);\r\n      return () => {\r\n        if (intervalRef.current) {\r\n          clearInterval(intervalRef.current);\r\n        }\r\n      };\r\n    }\r\n  }, [user, loadNotifications]);\r\n\r\n  const value = {\r\n    notifications,\r\n    unreadCount,\r\n    loading,\r\n    error,\r\n    markAsRead,\r\n    refresh: loadNotifications\r\n  };\r\n\r\n  return (\r\n    <NotificationContext.Provider value={value}>\r\n      {children}\r\n    </NotificationContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}