{"ast":null,"code":"var _jsxFileName = \"F:\\\\FullStack\\\\2025 - Feb\\\\ExpiryTracking_and_redistribution\\\\client\\\\src\\\\components\\\\MLInsights\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { mlService } from '../../services/ml.service';\nimport ForecastChart from './ForecastChart';\nimport OptimizationTable from './OptimizationTable';\nimport RiskAssessment from './RiskAssessment';\nimport LoadingSpinner from '../common/LoadingSpinner';\nimport ErrorMessage from '../common/ErrorMessage';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MLInsightsDashboard() {\n  _s();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [data, setData] = useState({\n    forecast: null,\n    optimization: null,\n    risk: null\n  });\n  useEffect(() => {\n    loadInsights();\n  }, []);\n  const loadInsights = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const [forecast, risk] = await Promise.all([mlService.getForecast(30), mlService.getExpiryRisk()]);\n      setData({\n        forecast,\n        risk\n      });\n    } catch (error) {\n      setError('Failed to load ML insights');\n      console.error('ML Insights Error:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(ErrorMessage, {\n    message: error,\n    onRetry: loadInsights\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ml-insights-dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Inventory Insights\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"insights-grid\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"insight-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Demand Forecast\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ForecastChart, {\n          data: data.forecast\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"insight-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Stock Risk Assessment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(RiskAssessment, {\n          data: data.risk\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_s(MLInsightsDashboard, \"uMdKV5wZHd+8ybKh37Zduvkw6Ak=\");\n_c = MLInsightsDashboard;\nexport default MLInsightsDashboard;\nvar _c;\n$RefreshReg$(_c, \"MLInsightsDashboard\");","map":{"version":3,"names":["React","useState","useEffect","mlService","ForecastChart","OptimizationTable","RiskAssessment","LoadingSpinner","ErrorMessage","jsxDEV","_jsxDEV","MLInsightsDashboard","_s","loading","setLoading","error","setError","data","setData","forecast","optimization","risk","loadInsights","Promise","all","getForecast","getExpiryRisk","console","fileName","_jsxFileName","lineNumber","columnNumber","message","onRetry","className","children","_c","$RefreshReg$"],"sources":["F:/FullStack/2025 - Feb/ExpiryTracking_and_redistribution/client/src/components/MLInsights/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { mlService } from '../../services/ml.service';\r\nimport ForecastChart from './ForecastChart';\r\nimport OptimizationTable from './OptimizationTable';\r\nimport RiskAssessment from './RiskAssessment';\r\nimport LoadingSpinner from '../common/LoadingSpinner';\r\nimport ErrorMessage from '../common/ErrorMessage';\r\nimport './styles.css';\r\n\r\nfunction MLInsightsDashboard() {\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [data, setData] = useState({\r\n    forecast: null,\r\n    optimization: null,\r\n    risk: null\r\n  });\r\n\r\n  useEffect(() => {\r\n    loadInsights();\r\n  }, []);\r\n\r\n  const loadInsights = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      const [forecast, risk] = await Promise.all([\r\n        mlService.getForecast(30),\r\n        mlService.getExpiryRisk()\r\n      ]);\r\n\r\n      setData({\r\n        forecast,\r\n        risk\r\n      });\r\n    } catch (error) {\r\n      setError('Failed to load ML insights');\r\n      console.error('ML Insights Error:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  if (loading) return <LoadingSpinner />;\r\n  if (error) return <ErrorMessage message={error} onRetry={loadInsights} />;\r\n\r\n  return (\r\n    <div className=\"ml-insights-dashboard\">\r\n      <h2>Inventory Insights</h2>\r\n      \r\n      <div className=\"insights-grid\">\r\n        <div className=\"insight-card\">\r\n          <h3>Demand Forecast</h3>\r\n          <ForecastChart data={data.forecast} />\r\n        </div>\r\n\r\n        <div className=\"insight-card\">\r\n          <h3>Stock Risk Assessment</h3>\r\n          <RiskAssessment data={data.risk} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MLInsightsDashboard; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}