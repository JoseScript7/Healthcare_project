{"ast":null,"code":"import api from './api';\nexport const mlService = {\n  async getForecast(days = 30) {\n    try {\n      const response = await api.get('/ml/forecast', {\n        params: {\n          days\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Forecast Error:', error);\n      throw new Error('Failed to get forecast');\n    }\n  },\n  async getStockOptimization(itemId, leadTime) {\n    try {\n      const response = await api.get('/ml/optimize', {\n        params: {\n          item_id: itemId,\n          lead_time: leadTime\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Optimization Error:', error);\n      throw new Error('Failed to get stock optimization');\n    }\n  },\n  async getExpiryRisk() {\n    try {\n      const response = await api.get('/ml/risk');\n      return response.data;\n    } catch (error) {\n      console.error('Risk Assessment Error:', error);\n      throw new Error('Failed to get expiry risk assessment');\n    }\n  }\n};","map":{"version":3,"names":["api","mlService","getForecast","days","response","get","params","data","error","console","Error","getStockOptimization","itemId","leadTime","item_id","lead_time","getExpiryRisk"],"sources":["F:/FullStack/2025 - Feb/ExpiryTracking_and_redistribution/client/src/services/ml.service.js"],"sourcesContent":["import api from './api';\r\n\r\nexport const mlService = {\r\n  async getForecast(days = 30) {\r\n    try {\r\n      const response = await api.get('/ml/forecast', {\r\n        params: { days }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Forecast Error:', error);\r\n      throw new Error('Failed to get forecast');\r\n    }\r\n  },\r\n\r\n  async getStockOptimization(itemId, leadTime) {\r\n    try {\r\n      const response = await api.get('/ml/optimize', {\r\n        params: {\r\n          item_id: itemId,\r\n          lead_time: leadTime\r\n        }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Optimization Error:', error);\r\n      throw new Error('Failed to get stock optimization');\r\n    }\r\n  },\r\n\r\n  async getExpiryRisk() {\r\n    try {\r\n      const response = await api.get('/ml/risk');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Risk Assessment Error:', error);\r\n      throw new Error('Failed to get expiry risk assessment');\r\n    }\r\n  }\r\n}; "],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AAEvB,OAAO,MAAMC,SAAS,GAAG;EACvB,MAAMC,WAAWA,CAACC,IAAI,GAAG,EAAE,EAAE;IAC3B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,cAAc,EAAE;QAC7CC,MAAM,EAAE;UAAEH;QAAK;MACjB,CAAC,CAAC;MACF,OAAOC,QAAQ,CAACG,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;MACvC,MAAM,IAAIE,KAAK,CAAC,wBAAwB,CAAC;IAC3C;EACF,CAAC;EAED,MAAMC,oBAAoBA,CAACC,MAAM,EAAEC,QAAQ,EAAE;IAC3C,IAAI;MACF,MAAMT,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,cAAc,EAAE;QAC7CC,MAAM,EAAE;UACNQ,OAAO,EAAEF,MAAM;UACfG,SAAS,EAAEF;QACb;MACF,CAAC,CAAC;MACF,OAAOT,QAAQ,CAACG,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C,MAAM,IAAIE,KAAK,CAAC,kCAAkC,CAAC;IACrD;EACF,CAAC;EAED,MAAMM,aAAaA,CAAA,EAAG;IACpB,IAAI;MACF,MAAMZ,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,UAAU,CAAC;MAC1C,OAAOD,QAAQ,CAACG,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,MAAM,IAAIE,KAAK,CAAC,sCAAsC,CAAC;IACzD;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}